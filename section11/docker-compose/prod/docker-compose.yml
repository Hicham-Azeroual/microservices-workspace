version: "3.8"

services:
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - 7080:8080
    networks:
      - bank-network

  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s
    networks:
      - bank-network

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s
    networks:
      - bank-network

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./observability/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - bank-network

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9001:9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 240s
    networks:
      - bank-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s
    networks:
      - bank-network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 240s
    networks:
      - bank-network

  backend:
    image: grafana/loki:latest
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "7946:7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - bank-network

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;
        events {
          worker_connections   1000;
        }
        http {
          resolver 127.0.0.11;
          server {
            listen 3100;
            location = / {
              return 200 'OK';
              auth_basic off;
            }
            location = /api/prom/push { proxy_pass http://write:3100\$request_uri; }
            location = /api/prom/tail {
              proxy_pass http://read:3100\$request_uri;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
            location ~ /api/prom/.* { proxy_pass http://read:3100\$request_uri; }
            location = /loki/api/v1/push { proxy_pass http://write:3100\$request_uri; }
            location = /loki/api/v1/tail {
              proxy_pass http://read:3100\$request_uri;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
            location ~ /loki/api/.* { proxy_pass http://read:3100\$request_uri; }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s
    networks:
      - bank-network

  accountdb:
    extends:
      file: common-config.yml
      service: db-base-config
    container_name: accountdb
    ports:
      - "3307:3306"
    environment:
      - MYSQL_DATABASE=accountdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s

  loansdb:
    extends:
      file: common-config.yml
      service: db-base-config
    container_name: loansdb
    environment:
      - MYSQL_DATABASE=loansdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s

  cardsdb:
    extends:
      file: common-config.yml
      service: db-base-config
    container_name: cardsdb
    environment:
      - MYSQL_DATABASE=cardsdb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 180s

  rabbit:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 240s
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: hichamazeroual2002/configserver:s11
    container_name: configserver
    ports:
      - "8071:8071"
    depends_on:
      rabbit:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl --fail --silent http://localhost:8071/actuator/health/readiness | grep -q ''"status":"UP"'' || exit 1',
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 240s
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: hichamazeroual2002/eurekaserver:s11
    container_name: eurekaserver
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl --fail --silent http://localhost:8070/actuator/health/readiness | grep -q ''"status":"UP"'' || exit 1',
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 300s
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
    extends:
      file: common-config.yml
      service: microservice-configserver-config

  accounts:
    image: hichamazeroual2002/accounts:s11
    container_name: accounts

    depends_on:
      accountdb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl --fail --silent http://localhost:8080/actuator/health/readiness | grep -q ''"status":"UP"'' || exit 1',
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 300s
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountdb:3306/accountdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  loans:
    image: hichamazeroual2002/loans:s11
    container_name: loans
    ports:
      - "8090:8090"
    depends_on:
      loansdb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl --fail --silent http://localhost:8090/actuator/health/readiness | grep -q ''"status":"UP"'' || exit 1',
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 300s
    environment:
      SPRING_APPLICATION_NAME: "loans"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  cards:
    image: hichamazeroual2002/cards:s11
    container_name: cards
    ports:
      - "9000:9000"
    depends_on:
      cardsdb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl --fail --silent http://localhost:9000/actuator/health/readiness | grep -q ''"status":"UP"'' || exit 1',
        ]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 300s
    environment:
      SPRING_APPLICATION_NAME: "cards"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gatewayserver:
    image: hichamazeroual2002/gatwayserver:s11
    container_name: gatwayserver
    ports:
      - "8072:8072"
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatwayserver"
      SPRING_SECURITY_OAUTH2_RESOURCE_SERVER_JWT_JWK_SET_URI: "http://keycloak:8080/realms/bank-realm/protocol/openid-connect/certs"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

volumes:
  rabbitmq_data:

networks:
  bank-network:
    driver: bridge
